name: "Terraform Destroy"

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: "us-east-1"
  TF_VERSION: "1.5.0"
  S3_BUCKET: "meu-bucket-terraform-github-actions-uc-20"
  DYNAMODB_TABLE: "terraform-lock-20"

jobs:
  destroy:
    name: "Terraform Destroy"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials (Assume Role)
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_ARN }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: terraform init -reconfigure

      - name: Terraform Destroy
        run: terraform destroy -auto-approve

      - name: Apagar arquivo de estado no S3 (se existir)
        run: |
          if aws s3 ls "s3://${{ env.S3_BUCKET }}/terraform.tfstate" 2>/dev/null; then
            echo "Apagaro terraform.tfstate..."
            aws s3 rm "s3://${{ env.S3_BUCKET }}/terraform.tfstate"
          else
            echo "Nenhum terraform.tfstate encontrado."
          fi

      - name: Apagar S3 Bucket (se existir e estiver vazio)
        run: |
          if aws s3 ls "s3://${{ env.S3_BUCKET }}" 2>/dev/null; then
            echo "Apagar bucket S3..."
            aws s3 rb s3://${{ env.S3_BUCKET }} --force
          else
            echo "O bucket não existe"
          fi

      - name: Apagar DynamoDB Table (se existir)
        run: |
          if aws dynamodb describe-table --table-name ${{ env.DYNAMODB_TABLE }} 2>/dev/null; then
            echo "Apagar tabela DynamoDB..."
            aws dynamodb delete-table --table-name ${{ env.DYNAMODB_TABLE }}
          else
            echo "A tabela DynamoDB não existe"
          fi

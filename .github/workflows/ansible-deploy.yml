name: Deploy EC2 com Ansible

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  env:
  AWS_REGION: "us-east-1"
  TF_VERSION: "1.5.0"
  S3_BUCKET: "meu-bucket-ansible1"
  DYNAMODB_TABLE: "lock-ansible"
  OUTPUTS_S3_PATH: "s3://meu-bucket-terraform-github-actions-uc-20/outputs/terraform_outputs.env"
  PRIVATE_KEY_S3_PATH: "s3://meu-bucket-terraform-github-actions-uc-20/outputs/id_rsa.pem"
  PRIVATE_KEY_LOCAL_PATH: "/tmp/id_rsa.pem"
  PRIVATE_KEY_AUX_PATH: "/tmp/id_rsa_aux.pem"
  INVENTORY_S3_PATH: "s3://meu-bucket-terraform-github-actions-uc-20/outputs/inventory"
  INVENTORY_LOCAL_PATH: "/tmp/inventory"  # Caminho local para onde o inventory será baixado


jobs:
  ansible:
    name: "Ansible"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Assume AWS Role
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_ARN }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}


      - name: Criar S3 Bucket (se não existir)
        run: |
          if aws s3 ls "s3://${{ env.S3_BUCKET }}" 2>&1 | grep -q 'NoSuchBucket'; then
            echo "Bucket não existe. Criando..."
            aws s3 mb s3://${{ env.S3_BUCKET }} --region ${{ env.AWS_REGION }}
          else
            echo "Bucket já existe. Pulando criação."
          fi
      - name: Criar diretório no S3 para outputs (se necessário)
        run: |
          echo "🗂 Criando diretório no S3 para os outputs..."
          aws s3api put-object --bucket ${{ env.S3_BUCKET }} --key "outputs/"
    
      - name: Criar Tabela DynamoDB (se não existir)
        run: |
          if aws dynamodb describe-table --table-name ${{ env.DYNAMODB_TABLE }} 2>&1 | grep -q 'ResourceNotFoundException'; then
            echo "Tabela DynamoDB não existe. Criando..."
            aws dynamodb create-table \
              --table-name ${{ env.DYNAMODB_TABLE }} \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST
          else
            echo "Tabela já existe. Pulando criação."
          fi

  apply:
    name: "Terraform-Ansible Init - Plan - Apply"
    runs-on: ubuntu-latest
    needs: ansible
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Assume AWS Role
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_ARN }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init na Raiz
        run: terraform init -reconfigure
        working-directory: .

      # 📥 **Baixar outputs do Terraform do S3**
      - name: Baixar outputs do Terraform do S3
        run: |
          echo "📥 Baixando outputs do Terraform..."
          aws s3 cp ${{ env.OUTPUTS_S3_PATH }} terraform_outputs.env --region ${{ env.AWS_REGION }}

          if [ -f terraform_outputs.env ]; then
            echo "✅ Arquivo terraform_outputs.env baixado com sucesso."
            cat terraform_outputs.env
          else
            echo "❌ ERRO: Arquivo terraform_outputs.env NÃO encontrado!"
            exit 1
          fi

      # 📌 **Carregar os outputs como variáveis de ambiente**
      - name: Carregar Outputs do Terraform
        run: |
          echo "📂 Carregando outputs do Terraform..."
          source terraform_outputs.env

          while IFS='=' read -r key value; do
            if [[ -n "$key" && ! "$key" =~ ^# ]]; then
              value=$(echo "$value" | tr -d '"' | tr -d "'")  
              value=$(echo "$value" | xargs)  
              echo "$key=$value" >> $GITHUB_ENV
            fi
          done < terraform_outputs.env

      - name: Debug Terraform Outputs
        run: |
          echo "✅ Debug dos valores extraídos do Terraform:"
          echo "VPC_ID=${{ env.VPC_ID }}"
          echo "SUBNET_ID=${{ env.SUBNET_ID }}"
          echo "KEY_PAIR_NAME=${{ env.KEY_PAIR_NAME }}"
          echo "PRIVATE_KEY=***SECRETO***"

      # 📥 **Baixar chave privada do S3**
      - name: Baixar chave privada do S3
        run: |
          echo "📥 Baixando chave privada do S3..."
          aws s3 cp ${{ env.PRIVATE_KEY_S3_PATH }} ${{ env.PRIVATE_KEY_LOCAL_PATH }} --region ${{ env.AWS_REGION }}
          chmod 600 ${{ env.PRIVATE_KEY_LOCAL_PATH }}

      # 📥 **Criar e verificar um ficheiro auxiliar da chave privada**
      - name: Criar ficheiro auxiliar da chave privada
        run: |
          echo "📥 Criando e verificando ficheiro auxiliar..."
          cp ${{ env.PRIVATE_KEY_LOCAL_PATH }} ${{ env.PRIVATE_KEY_AUX_PATH }}
          chmod 600 ${{ env.PRIVATE_KEY_AUX_PATH }}

          echo "🔍 Conteúdo do ficheiro auxiliar id_rsa_aux.pem: - VER - VER-VER "
          cat ${{ env.PRIVATE_KEY_AUX_PATH }}
          echo "🔍 Fim do conteúdo. - VISTO - VISTO"

      # ☁️ **Enviar chave auxiliar para o S3 novamente (Backup)**
      - name: Enviar chave auxiliar para o S3 (Backup)
        run: |
          echo "📤 Enviando chave auxiliar de volta ao S3..."
          aws s3 cp ${{ env.PRIVATE_KEY_AUX_PATH }} s3://meu-bucket-terraform-github-actions-uc-20/outputs/id_rsa_aux.pem --region ${{ env.AWS_REGION }}





      # 📌 **Executar Terraform no diretório Ansible**
      - name: Terraform Init (Ansible)
        run: |
          cd ansible
          terraform init -reconfigure

      - name: Terraform Plan (Ansible)
        run: |
          cd ansible
          terraform plan -var "vpc_id=${{ env.VPC_ID }}" \
                         -var "subnet_id=${{ env.SUBNET_ID }}" \
                         -var "key_pair_name=${{ env.KEY_PAIR_NAME }}" \
                         -var "private_key_pem=$(cat ${{ env.PRIVATE_KEY_LOCAL_PATH }})" \
                         -out=tfplan

      - name: Terraform Apply (Ansible)
        run: |
          cd ansible
          terraform apply -var "vpc_id=${{ env.VPC_ID }}" \
                          -var "subnet_id=${{ env.SUBNET_ID }}" \
                          -var "key_pair_name=${{ env.KEY_PAIR_NAME }}" \
                          -var "private_key_pem=$(cat ${{ env.PRIVATE_KEY_LOCAL_PATH }})" \
                          -auto-approve

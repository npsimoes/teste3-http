name: "Terraform Deploy"

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: "us-east-1"
  TF_VERSION: "1.5.0"
  S3_BUCKET: "meu-bucket-terraform-github-actions-uc-20"
  DYNAMODB_TABLE: "terraform-lock-20"
  OUTPUTS_S3_PATH: "s3://meu-bucket-terraform-github-actions-uc-20/outputs/terraform_outputs.env" 

jobs:
  setup:
    name: "Terraform Setup"
    runs-on: ubuntu-latest
    steps:
      - name: Assume AWS Role
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::977099009119:role/role-github-actions-estagio-uc
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}

      - name: Criar S3 Bucket (se não existir)
        run: |
          if aws s3 ls "s3://${{ env.S3_BUCKET }}" 2>&1 | grep -q 'NoSuchBucket'; then
            echo "Bucket não existe. Criando..."
            aws s3 mb s3://${{ env.S3_BUCKET }} --region ${{ env.AWS_REGION }}
          else
            echo "Bucket já existe. Pulando criação."
          fi
      - name: Criar diretório no S3 para outputs (se necessário)
        run: |
          echo "🗂 Criando diretório no S3 para os outputs..."
          aws s3api put-object --bucket ${{ env.S3_BUCKET }} --key "outputs/"
  
      - name: Criar Tabela DynamoDB (se não existir)
        run: |
          if aws dynamodb describe-table --table-name ${{ env.DYNAMODB_TABLE }} 2>&1 | grep -q 'ResourceNotFoundException'; then
            echo "Tabela DynamoDB não existe. Criando..."
            aws dynamodb create-table \
              --table-name ${{ env.DYNAMODB_TABLE }} \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST
          else
            echo "Tabela já existe. Pulando criação."
          fi

  apply:
    name: "Terraform Init - Plan - Apply"
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Assume AWS Role
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::977099009119:role/role-github-actions-estagio-uc
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: terraform init -reconfigure

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan

      # 🔍 **Obter e Salvar Outputs do Terraform**
      - name: Obter e Salvar Outputs do Terraform
        run: |
          echo "🔍 Extraindo outputs do Terraform..."

          # Capturar outputs corretamente
          RAW_VPC_ID=$(terraform output -raw vpc_id 2>/dev/null)
          RAW_SUBNET_ID=$(terraform output -raw subnet_id 2>/dev/null)
          RAW_KEY_PAIR_NAME=$(terraform output -raw key_pair_name 2>/dev/null)
          RAW_PRIVATE_KEY=$(terraform output -raw private_key_pem 2>/dev/null | base64)  # Codificar Base64

          # Aplicar filtros corretos
          VPC_ID=$(echo "$RAW_VPC_ID" | grep -Eo 'vpc-[a-f0-9]+')
          SUBNET_ID=$(echo "$RAW_SUBNET_ID" | grep -Eo 'subnet-[a-f0-9]+')
          KEY_PAIR_NAME=$(echo "$RAW_KEY_PAIR_NAME" | sed -n 's/^.*stdout:\([^:]*\).*$/\1/p' | tr -d "'[:space:]")
          PRIVATE_KEY=$(echo "$RAW_PRIVATE_KEY" | base64 --wrap=0)  # Garante que a chave esteja numa única linha

          # Debug: Mostrar valores extraídos
          echo "✅ RAW_VPC_ID=$RAW_VPC_ID"
          echo "✅ RAW_SUBNET_ID=$RAW_SUBNET_ID"
          echo "✅ RAW_KEY_PAIR_NAME=$RAW_KEY_PAIR_NAME"
          echo "✅ RAW_PRIVATE_KEY=**** (Codificada em Base64)"

          echo "✅ VPC_ID=$VPC_ID"
          echo "✅ SUBNET_ID=$SUBNET_ID"
          echo "✅ KEY_PAIR_NAME=$KEY_PAIR_NAME"
          echo "✅ PRIVATE_KEY=**** (Base64 - Limpo)"

          # Gravar os valores no ficheiro terraform_outputs.env
          echo "VPC_ID=\"$VPC_ID\"" > terraform_outputs.env
          echo "SUBNET_ID=\"$SUBNET_ID\"" >> terraform_outputs.env
          echo "KEY_PAIR_NAME=\"$KEY_PAIR_NAME\"" >> terraform_outputs.env
          echo "PRIVATE_KEY=\"$PRIVATE_KEY\"" >> terraform_outputs.env  # Armazena codificado em Base64

          # Debug: Exibir conteúdo do ficheiro antes do envio
          echo "📂 Conteúdo do terraform_outputs.env antes do upload:"
          cat terraform_outputs.env

          # Enviar para o S3
          aws s3 cp terraform_outputs.env ${{ env.OUTPUTS_S3_PATH }} --region ${{ env.AWS_REGION }}


     

      # ☁️ **Salvar outputs no S3**
      - name: Enviar outputs para o S3
        run: |
          echo "📤 Enviando outputs para o S3..."
          aws s3 cp terraform_outputs.env ${{ env.OUTPUTS_S3_PATH }} --region ${{ env.AWS_REGION }}

      # 🛠️ **Verificar se o arquivo foi salvo corretamente**
      - name: Verificar arquivo no S3
        run: |
          echo "📂 Verificando arquivo no S3..."
          aws s3 ls ${{ env.OUTPUTS_S3_PATH }} || echo "❌ ERRO: Arquivo terraform_outputs.env NÃO encontrado no S3!"

      # Criar e salvar a chave privada num ficheiro local
      - name: Criar um ficheiro id_rsa localmente
        run: |
          echo "🔍 Criando arquivo id_rsa corretamente..."
       
          # Decodificar e remover quebras de linha desnecessárias
          echo "${PRIVATE_KEY}" | base64 --decode > id_rsa
          chmod 600 id_rsa
   
          # Debug: Exibir conteúdo do ficheiro id_rsa
          echo "🔍 Conteúdo do id_rsa gerado:"
          cat id_rsa
          echo "🔍 Fim do conteúdo."

      # Upload para o S3
      - name: Enviar id_rsa para S3
        run: |
          aws s3 cp id_rsa s3://meu-bucket-terraform-github-actions-uc-20/outputs/id_rsa --region us-east-1          

